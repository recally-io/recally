// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: bookmark_tags.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBookmarkTag = `-- name: CreateBookmarkTag :one
INSERT INTO bookmark_tags (name, user_id)
VALUES ($1, $2)
ON CONFLICT (name, user_id) DO UPDATE
SET name = EXCLUDED.name
RETURNING id, name, user_id, created_at, updated_at
`

type CreateBookmarkTagParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateBookmarkTag(ctx context.Context, db DBTX, arg CreateBookmarkTagParams) (BookmarkTag, error) {
	row := db.QueryRow(ctx, createBookmarkTag, arg.Name, arg.UserID)
	var i BookmarkTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBookmarkTag = `-- name: DeleteBookmarkTag :exec
DELETE FROM bookmark_tags
WHERE id = $1
  AND user_id = $2
`

type DeleteBookmarkTagParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteBookmarkTag(ctx context.Context, db DBTX, arg DeleteBookmarkTagParams) error {
	_, err := db.Exec(ctx, deleteBookmarkTag, arg.ID, arg.UserID)
	return err
}

const linkBookmarkWithTags = `-- name: LinkBookmarkWithTags :exec
INSERT INTO bookmark_tags_mapping (bookmark_id, tag_id)
SELECT $1, bt.id
FROM bookmark_tags bt
WHERE bt.name = ANY ($2::text[])
  AND bt.user_id = $3
`

type LinkBookmarkWithTagsParams struct {
	BookmarkID uuid.UUID
	Column2    []string
	UserID     uuid.UUID
}

func (q *Queries) LinkBookmarkWithTags(ctx context.Context, db DBTX, arg LinkBookmarkWithTagsParams) error {
	_, err := db.Exec(ctx, linkBookmarkWithTags, arg.BookmarkID, arg.Column2, arg.UserID)
	return err
}

const listBookmarkTagsByBookmarkId = `-- name: ListBookmarkTagsByBookmarkId :many
SELECT bt.name
FROM bookmark_tags bt
  JOIN bookmark_tags_mapping btm ON bt.id = btm.tag_id
WHERE btm.bookmark_id = $1
`

func (q *Queries) ListBookmarkTagsByBookmarkId(ctx context.Context, db DBTX, bookmarkID uuid.UUID) ([]string, error) {
	rows, err := db.Query(ctx, listBookmarkTagsByBookmarkId, bookmarkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookmarkTagsByUser = `-- name: ListBookmarkTagsByUser :many
SELECT name, count(*) as cnt
FROM bookmark_tags
WHERE user_id = $1
GROUP BY name
ORDER BY cnt DESC
`

type ListBookmarkTagsByUserRow struct {
	Name string
	Cnt  int64
}

func (q *Queries) ListBookmarkTagsByUser(ctx context.Context, db DBTX, userID uuid.UUID) ([]ListBookmarkTagsByUserRow, error) {
	rows, err := db.Query(ctx, listBookmarkTagsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookmarkTagsByUserRow
	for rows.Next() {
		var i ListBookmarkTagsByUserRow
		if err := rows.Scan(&i.Name, &i.Cnt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExistingBookmarkTagsByTags = `-- name: ListExistingBookmarkTagsByTags :many
SELECT name
FROM bookmark_tags
WHERE name = ANY ($1::text[])
  AND user_id = $2
`

type ListExistingBookmarkTagsByTagsParams struct {
	Column1 []string
	UserID  uuid.UUID
}

func (q *Queries) ListExistingBookmarkTagsByTags(ctx context.Context, db DBTX, arg ListExistingBookmarkTagsByTagsParams) ([]string, error) {
	rows, err := db.Query(ctx, listExistingBookmarkTagsByTags, arg.Column1, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ownerTransferBookmarkTag = `-- name: OwnerTransferBookmarkTag :exec
UPDATE bookmark_tags
SET 
    user_id = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $2
`

type OwnerTransferBookmarkTagParams struct {
	NewUserID pgtype.UUID
	UserID    pgtype.UUID
}

func (q *Queries) OwnerTransferBookmarkTag(ctx context.Context, db DBTX, arg OwnerTransferBookmarkTagParams) error {
	_, err := db.Exec(ctx, ownerTransferBookmarkTag, arg.NewUserID, arg.UserID)
	return err
}

const unLinkBookmarkWithTags = `-- name: UnLinkBookmarkWithTags :exec
DELETE FROM bookmark_tags_mapping
WHERE bookmark_id = $1
  AND tag_id IN (SELECT id
                 FROM bookmark_tags
                 WHERE name = ANY ($2::text[])
                   AND user_id = $3)
`

type UnLinkBookmarkWithTagsParams struct {
	BookmarkID uuid.UUID
	Column2    []string
	UserID     uuid.UUID
}

func (q *Queries) UnLinkBookmarkWithTags(ctx context.Context, db DBTX, arg UnLinkBookmarkWithTagsParams) error {
	_, err := db.Exec(ctx, unLinkBookmarkWithTags, arg.BookmarkID, arg.Column2, arg.UserID)
	return err
}
