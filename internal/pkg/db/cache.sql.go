// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cache.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCache = `-- name: CreateCache :exec
INSERT INTO cache (domain, key, value, expires_at)
VALUES ($1, $2, $3, $4)
`

type CreateCacheParams struct {
	Domain    string
	Key       string
	Value     []byte
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateCache(ctx context.Context, db DBTX, arg CreateCacheParams) error {
	_, err := db.Exec(ctx, createCache,
		arg.Domain,
		arg.Key,
		arg.Value,
		arg.ExpiresAt,
	)
	return err
}

const deleteCacheByKey = `-- name: DeleteCacheByKey :exec
DELETE FROM cache WHERE key = $1 AND domain = $2
`

type DeleteCacheByKeyParams struct {
	Key    string
	Domain string
}

func (q *Queries) DeleteCacheByKey(ctx context.Context, db DBTX, arg DeleteCacheByKeyParams) error {
	_, err := db.Exec(ctx, deleteCacheByKey, arg.Key, arg.Domain)
	return err
}

const deleteExpiredCache = `-- name: DeleteExpiredCache :exec
DELETE FROM cache WHERE expires_at < $1
`

func (q *Queries) DeleteExpiredCache(ctx context.Context, db DBTX, expiresAt pgtype.Timestamp) error {
	_, err := db.Exec(ctx, deleteExpiredCache, expiresAt)
	return err
}

const getCacheByKey = `-- name: GetCacheByKey :one
SELECT id, domain, key, value, expires_at, created_at, updated_at FROM cache WHERE domain= $1 AND key = $2 AND expires_at > now()
`

type GetCacheByKeyParams struct {
	Domain string
	Key    string
}

func (q *Queries) GetCacheByKey(ctx context.Context, db DBTX, arg GetCacheByKeyParams) (Cache, error) {
	row := db.QueryRow(ctx, getCacheByKey, arg.Domain, arg.Key)
	var i Cache
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Key,
		&i.Value,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isCacheExists = `-- name: IsCacheExists :one
SELECT EXISTS(SELECT 1 FROM cache WHERE domain = $1 AND key = $2 AND expires_at > now()) as exists
`

type IsCacheExistsParams struct {
	Domain string
	Key    string
}

func (q *Queries) IsCacheExists(ctx context.Context, db DBTX, arg IsCacheExistsParams) (bool, error) {
	row := db.QueryRow(ctx, isCacheExists, arg.Domain, arg.Key)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateCache = `-- name: UpdateCache :exec
UPDATE cache SET value = $3, expires_at = $4
WHERE key = $1 AND domain = $2
`

type UpdateCacheParams struct {
	Key       string
	Domain    string
	Value     []byte
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) UpdateCache(ctx context.Context, db DBTX, arg UpdateCacheParams) error {
	_, err := db.Exec(ctx, updateCache,
		arg.Key,
		arg.Domain,
		arg.Value,
		arg.ExpiresAt,
	)
	return err
}
