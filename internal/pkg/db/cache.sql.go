// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cache.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCache = `-- name: CreateCache :exec
INSERT INTO cache (key, value, expires_at, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateCacheParams struct {
	Key       string
	Value     pgtype.Text
	ExpiresAt pgtype.Timestamp
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateCache(ctx context.Context, arg CreateCacheParams) error {
	_, err := q.db.Exec(ctx, createCache,
		arg.Key,
		arg.Value,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteCacheByKey = `-- name: DeleteCacheByKey :exec
DELETE FROM cache WHERE key = $1
`

func (q *Queries) DeleteCacheByKey(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteCacheByKey, key)
	return err
}

const deleteExpiredCache = `-- name: DeleteExpiredCache :exec
DELETE FROM cache WHERE expires_at < $1
`

func (q *Queries) DeleteExpiredCache(ctx context.Context, expiresAt pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, deleteExpiredCache, expiresAt)
	return err
}

const getCacheByKey = `-- name: GetCacheByKey :one
SELECT id, key, value, expires_at, created_at, updated_at FROM cache WHERE key = $1
`

func (q *Queries) GetCacheByKey(ctx context.Context, key string) (Cache, error) {
	row := q.db.QueryRow(ctx, getCacheByKey, key)
	var i Cache
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCache = `-- name: UpdateCache :exec
UPDATE cache SET value = $2, expires_at = $3, updated_at = $4
WHERE key = $1
`

type UpdateCacheParams struct {
	Key       string
	Value     pgtype.Text
	ExpiresAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateCache(ctx context.Context, arg UpdateCacheParams) error {
	_, err := q.db.Exec(ctx, updateCache,
		arg.Key,
		arg.Value,
		arg.ExpiresAt,
		arg.UpdatedAt,
	)
	return err
}
