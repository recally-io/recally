// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTelegramUser = `-- name: DeleteTelegramUser :exec
DELETE FROM users WHERE telegram = $1
`

func (q *Queries) DeleteTelegramUser(ctx context.Context, db DBTX, telegram pgtype.Text) error {
	_, err := db.Exec(ctx, deleteTelegramUser, telegram)
	return err
}

const getTelegramUser = `-- name: GetTelegramUser :one
SELECT id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at FROM users WHERE telegram = $1
`

func (q *Queries) GetTelegramUser(ctx context.Context, db DBTX, telegram pgtype.Text) (User, error) {
	row := db.QueryRow(ctx, getTelegramUser, telegram)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const inserUser = `-- name: InserUser :one
INSERT INTO users (username, telegram, activate_assistant_id, activate_thread_id)
VALUES ($1, $2, $3, $4)
RETURNING id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at
`

type InserUserParams struct {
	Username            pgtype.Text
	Telegram            pgtype.Text
	ActivateAssistantID pgtype.UUID
	ActivateThreadID    pgtype.UUID
}

func (q *Queries) InserUser(ctx context.Context, db DBTX, arg InserUserParams) (User, error) {
	row := db.QueryRow(ctx, inserUser,
		arg.Username,
		arg.Telegram,
		arg.ActivateAssistantID,
		arg.ActivateThreadID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTelegramUser = `-- name: UpdateTelegramUser :one
UPDATE users SET activate_assistant_id = $1, activate_thread_id = $2 WHERE telegram = $3
RETURNING id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at
`

type UpdateTelegramUserParams struct {
	ActivateAssistantID pgtype.UUID
	ActivateThreadID    pgtype.UUID
	Telegram            pgtype.Text
}

func (q *Queries) UpdateTelegramUser(ctx context.Context, db DBTX, arg UpdateTelegramUserParams) (User, error) {
	row := db.QueryRow(ctx, updateTelegramUser, arg.ActivateAssistantID, arg.ActivateThreadID, arg.Telegram)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
