// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash, github, google, telegram, activate_assistant_id, activate_thread_id, status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at, password_hash
`

type CreateUserParams struct {
	Username            pgtype.Text
	Email               pgtype.Text
	PasswordHash        pgtype.Text
	Github              pgtype.Text
	Google              pgtype.Text
	Telegram            pgtype.Text
	ActivateAssistantID pgtype.UUID
	ActivateThreadID    pgtype.UUID
	Status              string
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (User, error) {
	row := db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Github,
		arg.Google,
		arg.Telegram,
		arg.ActivateAssistantID,
		arg.ActivateThreadID,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}

const deleteTelegramUser = `-- name: DeleteTelegramUser :exec
DELETE FROM users WHERE telegram = $1
`

func (q *Queries) DeleteTelegramUser(ctx context.Context, db DBTX, telegram pgtype.Text) error {
	_, err := db.Exec(ctx, deleteTelegramUser, telegram)
	return err
}

const getTelegramUser = `-- name: GetTelegramUser :one
SELECT id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at, password_hash FROM users WHERE telegram = $1
`

func (q *Queries) GetTelegramUser(ctx context.Context, db DBTX, telegram pgtype.Text) (User, error) {
	row := db.QueryRow(ctx, getTelegramUser, telegram)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at, password_hash FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, db DBTX, email pgtype.Text) (User, error) {
	row := db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at, password_hash FROM users WHERE uuid = $1
`

func (q *Queries) GetUserById(ctx context.Context, db DBTX, argUuid uuid.UUID) (User, error) {
	row := db.QueryRow(ctx, getUserById, argUuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}

const inserUser = `-- name: InserUser :one
INSERT INTO users (username, telegram, activate_assistant_id, activate_thread_id)
VALUES ($1, $2, $3, $4)
RETURNING id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at, password_hash
`

type InserUserParams struct {
	Username            pgtype.Text
	Telegram            pgtype.Text
	ActivateAssistantID pgtype.UUID
	ActivateThreadID    pgtype.UUID
}

func (q *Queries) InserUser(ctx context.Context, db DBTX, arg InserUserParams) (User, error) {
	row := db.QueryRow(ctx, inserUser,
		arg.Username,
		arg.Telegram,
		arg.ActivateAssistantID,
		arg.ActivateThreadID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}

const updateTelegramUser = `-- name: UpdateTelegramUser :one
UPDATE users SET activate_assistant_id = $1, activate_thread_id = $2 WHERE telegram = $3
RETURNING id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at, password_hash
`

type UpdateTelegramUserParams struct {
	ActivateAssistantID pgtype.UUID
	ActivateThreadID    pgtype.UUID
	Telegram            pgtype.Text
}

func (q *Queries) UpdateTelegramUser(ctx context.Context, db DBTX, arg UpdateTelegramUserParams) (User, error) {
	row := db.QueryRow(ctx, updateTelegramUser, arg.ActivateAssistantID, arg.ActivateThreadID, arg.Telegram)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE users SET username = $2, email = $3, github = $4,
  google = $5, telegram = $6, 
  activate_assistant_id=$7, activate_thread_id=$8, status = $9
WHERE uuid = $1
RETURNING id, uuid, username, email, github, google, telegram, activate_assistant_id, activate_thread_id, status, created_at, updated_at, password_hash
`

type UpdateUserByIdParams struct {
	Uuid                uuid.UUID
	Username            pgtype.Text
	Email               pgtype.Text
	Github              pgtype.Text
	Google              pgtype.Text
	Telegram            pgtype.Text
	ActivateAssistantID pgtype.UUID
	ActivateThreadID    pgtype.UUID
	Status              string
}

func (q *Queries) UpdateUserById(ctx context.Context, db DBTX, arg UpdateUserByIdParams) (User, error) {
	row := db.QueryRow(ctx, updateUserById,
		arg.Uuid,
		arg.Username,
		arg.Email,
		arg.Github,
		arg.Google,
		arg.Telegram,
		arg.ActivateAssistantID,
		arg.ActivateThreadID,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Github,
		&i.Google,
		&i.Telegram,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
	)
	return i, err
}
