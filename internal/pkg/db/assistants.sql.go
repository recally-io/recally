// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: assistants.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAssistant = `-- name: CreateAssistant :one

INSERT INTO assistants (user_id, name, description, system_prompt, model, metadata)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, uuid, user_id, name, description, system_prompt, model, metadata, created_at, updated_at
`

type CreateAssistantParams struct {
	UserID       pgtype.UUID
	Name         string
	Description  pgtype.Text
	SystemPrompt pgtype.Text
	Model        string
	Metadata     []byte
}

// CRUD for assistants
func (q *Queries) CreateAssistant(ctx context.Context, db DBTX, arg CreateAssistantParams) (Assistant, error) {
	row := db.QueryRow(ctx, createAssistant,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.SystemPrompt,
		arg.Model,
		arg.Metadata,
	)
	var i Assistant
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.SystemPrompt,
		&i.Model,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAssistant = `-- name: DeleteAssistant :exec
DELETE FROM assistants WHERE uuid = $1
`

func (q *Queries) DeleteAssistant(ctx context.Context, db DBTX, argUuid uuid.UUID) error {
	_, err := db.Exec(ctx, deleteAssistant, argUuid)
	return err
}

const getAssistant = `-- name: GetAssistant :one
SELECT id, uuid, user_id, name, description, system_prompt, model, metadata, created_at, updated_at FROM assistants WHERE uuid = $1
`

func (q *Queries) GetAssistant(ctx context.Context, db DBTX, argUuid uuid.UUID) (Assistant, error) {
	row := db.QueryRow(ctx, getAssistant, argUuid)
	var i Assistant
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.SystemPrompt,
		&i.Model,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAssistantsByUser = `-- name: ListAssistantsByUser :many
SELECT id, uuid, user_id, name, description, system_prompt, model, metadata, created_at, updated_at FROM assistants WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListAssistantsByUser(ctx context.Context, db DBTX, userID pgtype.UUID) ([]Assistant, error) {
	rows, err := db.Query(ctx, listAssistantsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assistant
	for rows.Next() {
		var i Assistant
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.SystemPrompt,
			&i.Model,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssistant = `-- name: UpdateAssistant :one
UPDATE assistants SET name = $2, description = $3, system_prompt = $4, model = $5, metadata = $6
WHERE uuid = $1
RETURNING id, uuid, user_id, name, description, system_prompt, model, metadata, created_at, updated_at
`

type UpdateAssistantParams struct {
	Uuid         uuid.UUID
	Name         string
	Description  pgtype.Text
	SystemPrompt pgtype.Text
	Model        string
	Metadata     []byte
}

func (q *Queries) UpdateAssistant(ctx context.Context, db DBTX, arg UpdateAssistantParams) (Assistant, error) {
	row := db.QueryRow(ctx, updateAssistant,
		arg.Uuid,
		arg.Name,
		arg.Description,
		arg.SystemPrompt,
		arg.Model,
		arg.Metadata,
	)
	var i Assistant
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.SystemPrompt,
		&i.Model,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
