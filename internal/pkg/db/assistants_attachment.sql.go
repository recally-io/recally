// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: assistants_attachment.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAssistantAttachment = `-- name: CreateAssistantAttachment :one
INSERT INTO assistant_attachments (user_id, assistant_id, thread_id, name, type, url, size, metadata)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, uuid, user_id, assistant_id, thread_id, name, type, url, size, metadata, created_at, updated_at
`

type CreateAssistantAttachmentParams struct {
	UserID      pgtype.UUID
	AssistantID pgtype.UUID
	ThreadID    pgtype.UUID
	Name        pgtype.Text
	Type        pgtype.Text
	Url         pgtype.Text
	Size        pgtype.Int4
	Metadata    []byte
}

// CRUD for assistant_attachments
func (q *Queries) CreateAssistantAttachment(ctx context.Context, db DBTX, arg CreateAssistantAttachmentParams) (AssistantAttachment, error) {
	row := db.QueryRow(ctx, createAssistantAttachment,
		arg.UserID,
		arg.AssistantID,
		arg.ThreadID,
		arg.Name,
		arg.Type,
		arg.Url,
		arg.Size,
		arg.Metadata,
	)
	var i AssistantAttachment
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.AssistantID,
		&i.ThreadID,
		&i.Name,
		&i.Type,
		&i.Url,
		&i.Size,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAssistantAttachment = `-- name: DeleteAssistantAttachment :exec
DELETE FROM assistant_attachments WHERE uuid = $1
`

func (q *Queries) DeleteAssistantAttachment(ctx context.Context, db DBTX, argUuid uuid.UUID) error {
	_, err := db.Exec(ctx, deleteAssistantAttachment, argUuid)
	return err
}

const deleteAssistantAttachmentsByAssistantId = `-- name: DeleteAssistantAttachmentsByAssistantId :exec
DELETE FROM assistant_attachments WHERE assistant_id = $1
`

func (q *Queries) DeleteAssistantAttachmentsByAssistantId(ctx context.Context, db DBTX, assistantID pgtype.UUID) error {
	_, err := db.Exec(ctx, deleteAssistantAttachmentsByAssistantId, assistantID)
	return err
}

const deleteAssistantAttachmentsByThreadId = `-- name: DeleteAssistantAttachmentsByThreadId :exec
DELETE FROM assistant_attachments WHERE thread_id = $1
`

func (q *Queries) DeleteAssistantAttachmentsByThreadId(ctx context.Context, db DBTX, threadID pgtype.UUID) error {
	_, err := db.Exec(ctx, deleteAssistantAttachmentsByThreadId, threadID)
	return err
}

const deleteAssistantAttachmentsByUserId = `-- name: DeleteAssistantAttachmentsByUserId :exec
DELETE FROM assistant_attachments WHERE user_id = $1
`

func (q *Queries) DeleteAssistantAttachmentsByUserId(ctx context.Context, db DBTX, userID pgtype.UUID) error {
	_, err := db.Exec(ctx, deleteAssistantAttachmentsByUserId, userID)
	return err
}

const getAssistantAttachmentById = `-- name: GetAssistantAttachmentById :one
SELECT id, uuid, user_id, assistant_id, thread_id, name, type, url, size, metadata, created_at, updated_at FROM assistant_attachments WHERE uuid = $1
`

func (q *Queries) GetAssistantAttachmentById(ctx context.Context, db DBTX, argUuid uuid.UUID) (AssistantAttachment, error) {
	row := db.QueryRow(ctx, getAssistantAttachmentById, argUuid)
	var i AssistantAttachment
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.AssistantID,
		&i.ThreadID,
		&i.Name,
		&i.Type,
		&i.Url,
		&i.Size,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAssistantAttachmentsByAssistantId = `-- name: ListAssistantAttachmentsByAssistantId :many
SELECT id, uuid, user_id, assistant_id, thread_id, name, type, url, size, metadata, created_at, updated_at FROM assistant_attachments WHERE assistant_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListAssistantAttachmentsByAssistantId(ctx context.Context, db DBTX, assistantID pgtype.UUID) ([]AssistantAttachment, error) {
	rows, err := db.Query(ctx, listAssistantAttachmentsByAssistantId, assistantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssistantAttachment
	for rows.Next() {
		var i AssistantAttachment
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.AssistantID,
			&i.ThreadID,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.Size,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssistantAttachmentsByThreadId = `-- name: ListAssistantAttachmentsByThreadId :many
SELECT id, uuid, user_id, assistant_id, thread_id, name, type, url, size, metadata, created_at, updated_at FROM assistant_attachments WHERE thread_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListAssistantAttachmentsByThreadId(ctx context.Context, db DBTX, threadID pgtype.UUID) ([]AssistantAttachment, error) {
	rows, err := db.Query(ctx, listAssistantAttachmentsByThreadId, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssistantAttachment
	for rows.Next() {
		var i AssistantAttachment
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.AssistantID,
			&i.ThreadID,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.Size,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssistantAttachmentsByUserId = `-- name: ListAssistantAttachmentsByUserId :many
SELECT id, uuid, user_id, assistant_id, thread_id, name, type, url, size, metadata, created_at, updated_at FROM assistant_attachments WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListAssistantAttachmentsByUserId(ctx context.Context, db DBTX, userID pgtype.UUID) ([]AssistantAttachment, error) {
	rows, err := db.Query(ctx, listAssistantAttachmentsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssistantAttachment
	for rows.Next() {
		var i AssistantAttachment
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.AssistantID,
			&i.ThreadID,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.Size,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssistantAttachment = `-- name: UpdateAssistantAttachment :exec
UPDATE assistant_attachments SET name = $2, type = $3, url = $4, size = $5, metadata = $6 WHERE uuid = $1
`

type UpdateAssistantAttachmentParams struct {
	Uuid     uuid.UUID
	Name     pgtype.Text
	Type     pgtype.Text
	Url      pgtype.Text
	Size     pgtype.Int4
	Metadata []byte
}

func (q *Queries) UpdateAssistantAttachment(ctx context.Context, db DBTX, arg UpdateAssistantAttachmentParams) error {
	_, err := db.Exec(ctx, updateAssistantAttachment,
		arg.Uuid,
		arg.Name,
		arg.Type,
		arg.Url,
		arg.Size,
		arg.Metadata,
	)
	return err
}
