// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: bookmark_share.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBookmarkShare = `-- name: CreateBookmarkShare :one
INSERT INTO bookmark_share (user_id, bookmark_id, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, bookmark_id, expires_at, created_at, updated_at
`

type CreateBookmarkShareParams struct {
	UserID     uuid.UUID
	BookmarkID pgtype.UUID
	ExpiresAt  pgtype.Timestamptz
}

func (q *Queries) CreateBookmarkShare(ctx context.Context, db DBTX, arg CreateBookmarkShareParams) (BookmarkShare, error) {
	row := db.QueryRow(ctx, createBookmarkShare, arg.UserID, arg.BookmarkID, arg.ExpiresAt)
	var i BookmarkShare
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookmarkID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBookmarkShareByBookmarkId = `-- name: DeleteBookmarkShareByBookmarkId :exec
DELETE FROM bookmark_share bs
USING bookmarks b
WHERE bs.bookmark_id = b.id
  AND b.id = $1
  AND b.user_id = $2
`

type DeleteBookmarkShareByBookmarkIdParams struct {
	ID     uuid.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteBookmarkShareByBookmarkId(ctx context.Context, db DBTX, arg DeleteBookmarkShareByBookmarkIdParams) error {
	_, err := db.Exec(ctx, deleteBookmarkShareByBookmarkId, arg.ID, arg.UserID)
	return err
}

const deleteExpiredBookmarkShare = `-- name: DeleteExpiredBookmarkShare :exec
DELETE
FROM bookmark_share
WHERE expires_at < now()
`

func (q *Queries) DeleteExpiredBookmarkShare(ctx context.Context, db DBTX) error {
	_, err := db.Exec(ctx, deleteExpiredBookmarkShare)
	return err
}

const getBookmarkShare = `-- name: GetBookmarkShare :one
SELECT id, user_id, bookmark_id, expires_at, created_at, updated_at
FROM bookmark_share
WHERE bookmark_id = $1
  AND user_id = $2
`

type GetBookmarkShareParams struct {
	BookmarkID pgtype.UUID
	UserID     uuid.UUID
}

func (q *Queries) GetBookmarkShare(ctx context.Context, db DBTX, arg GetBookmarkShareParams) (BookmarkShare, error) {
	row := db.QueryRow(ctx, getBookmarkShare, arg.BookmarkID, arg.UserID)
	var i BookmarkShare
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookmarkID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBookmarkShareContent = `-- name: GetBookmarkShareContent :one
SELECT bc.id, bc.type, bc.url, bc.user_id, bc.title, bc.description, bc.domain, bc.s3_key, bc.summary, bc.content, bc.html, bc.tags, bc.metadata, bc.created_at, bc.updated_at
FROM bookmark_share AS bs
  JOIN bookmarks AS b ON bs.bookmark_id = b.id
  JOIN bookmark_content AS bc ON b.content_id = bc.id
WHERE bs.id = $1
  AND (bs.expires_at is NULL OR bs.expires_at > now())
`

func (q *Queries) GetBookmarkShareContent(ctx context.Context, db DBTX, id uuid.UUID) (BookmarkContent, error) {
	row := db.QueryRow(ctx, getBookmarkShareContent, id)
	var i BookmarkContent
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Url,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Domain,
		&i.S3Key,
		&i.Summary,
		&i.Content,
		&i.Html,
		&i.Tags,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ownerTransferBookmarkShare = `-- name: OwnerTransferBookmarkShare :exec
UPDATE bookmark_share
SET 
    user_id = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $2
`

type OwnerTransferBookmarkShareParams struct {
	NewUserID pgtype.UUID
	UserID    pgtype.UUID
}

func (q *Queries) OwnerTransferBookmarkShare(ctx context.Context, db DBTX, arg OwnerTransferBookmarkShareParams) error {
	_, err := db.Exec(ctx, ownerTransferBookmarkShare, arg.NewUserID, arg.UserID)
	return err
}

const updateBookmarkShareByBookmarkId = `-- name: UpdateBookmarkShareByBookmarkId :one
UPDATE bookmark_share bs
SET expires_at = $3
FROM bookmarks b
WHERE bs.bookmark_id = b.id
  AND b.id = $1
  AND b.user_id = $2
RETURNING bs.id, bs.user_id, bs.bookmark_id, bs.expires_at, bs.created_at, bs.updated_at
`

type UpdateBookmarkShareByBookmarkIdParams struct {
	ID        uuid.UUID
	UserID    pgtype.UUID
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) UpdateBookmarkShareByBookmarkId(ctx context.Context, db DBTX, arg UpdateBookmarkShareByBookmarkIdParams) (BookmarkShare, error) {
	row := db.QueryRow(ctx, updateBookmarkShareByBookmarkId, arg.ID, arg.UserID, arg.ExpiresAt)
	var i BookmarkShare
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookmarkID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
