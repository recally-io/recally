// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: api_key.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO auth_api_keys (
    user_id, name, key_prefix, key_hash, scopes, 
    expires_at
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, name, key_prefix, key_hash, scopes, expires_at, last_used_at, created_at, updated_at
`

type CreateAPIKeyParams struct {
	UserID    uuid.UUID
	Name      string
	KeyPrefix string
	KeyHash   string
	Scopes    []string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateAPIKey(ctx context.Context, db DBTX, arg CreateAPIKeyParams) (AuthApiKey, error) {
	row := db.QueryRow(ctx, createAPIKey,
		arg.UserID,
		arg.Name,
		arg.KeyPrefix,
		arg.KeyHash,
		arg.Scopes,
		arg.ExpiresAt,
	)
	var i AuthApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.KeyPrefix,
		&i.KeyHash,
		&i.Scopes,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM auth_api_keys 
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.Exec(ctx, deleteAPIKey, id)
	return err
}

const getUserByApiKey = `-- name: GetUserByApiKey :one
SELECT u.id, u.uuid, u.username, u.password_hash, u.email, u.activate_assistant_id, u.activate_thread_id, u.status, u.created_at, u.updated_at, u.phone, u.settings FROM users u 
JOIN auth_api_keys ak ON u.uuid = ak.user_id
WHERE ak.key_hash = $1
    AND ak.expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) GetUserByApiKey(ctx context.Context, db DBTX, keyHash string) (User, error) {
	row := db.QueryRow(ctx, getUserByApiKey, keyHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.ActivateAssistantID,
		&i.ActivateThreadID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Phone,
		&i.Settings,
	)
	return i, err
}

const listAPIKeys = `-- name: ListAPIKeys :many
SELECT id, user_id, name, key_prefix, key_hash, scopes, expires_at, last_used_at, created_at, updated_at FROM auth_api_keys 
WHERE user_id = $1
    AND (
        ($2::text IS NULL OR key_prefix = $2::text)
        AND ($3::bool IS NULL OR 
            CASE 
                WHEN $3::bool = true THEN (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)
                WHEN $3::bool = false THEN true
            END
        )
    )
ORDER BY created_at DESC
`

type ListAPIKeysParams struct {
	UserID   uuid.UUID
	Prefix   pgtype.Text
	IsActive pgtype.Bool
}

func (q *Queries) ListAPIKeys(ctx context.Context, db DBTX, arg ListAPIKeysParams) ([]AuthApiKey, error) {
	rows, err := db.Query(ctx, listAPIKeys, arg.UserID, arg.Prefix, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthApiKey
	for rows.Next() {
		var i AuthApiKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.KeyPrefix,
			&i.KeyHash,
			&i.Scopes,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE auth_api_keys 
SET last_used_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.Exec(ctx, updateAPIKeyLastUsed, id)
	return err
}
