// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: text_embeddings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
	"vibrain/internal/pkg/db/types"
)

const deleteTextEmbeddingById = `-- name: DeleteTextEmbeddingById :exec
DELETE FROM text_embeddings
WHERE id = $1
`

func (q *Queries) DeleteTextEmbeddingById(ctx context.Context, db DBTX, id int64) error {
	_, err := db.Exec(ctx, deleteTextEmbeddingById, id)
	return err
}

const getTextEmbeddingById = `-- name: GetTextEmbeddingById :one
SELECT id, metadata, user_id, text, created_at, updated_at, embeddings
FROM text_embeddings
WHERE id = $1
`

type GetTextEmbeddingByIdRow struct {
	ID         int64
	Metadata   types.JSONB
	UserID     string
	Text       string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	Embeddings pgvector.Vector
}

func (q *Queries) GetTextEmbeddingById(ctx context.Context, db DBTX, id int64) (GetTextEmbeddingByIdRow, error) {
	row := db.QueryRow(ctx, getTextEmbeddingById, id)
	var i GetTextEmbeddingByIdRow
	err := row.Scan(
		&i.ID,
		&i.Metadata,
		&i.UserID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Embeddings,
	)
	return i, err
}

const insertTextEmbedding = `-- name: InsertTextEmbedding :exec
INSERT INTO text_embeddings (user_id, text, embeddings, metadata)
VALUES ($1, $2, $3, $4)
`

type InsertTextEmbeddingParams struct {
	UserID     string
	Text       string
	Embeddings pgvector.Vector
	Metadata   types.JSONB
}

func (q *Queries) InsertTextEmbedding(ctx context.Context, db DBTX, arg InsertTextEmbeddingParams) error {
	_, err := db.Exec(ctx, insertTextEmbedding,
		arg.UserID,
		arg.Text,
		arg.Embeddings,
		arg.Metadata,
	)
	return err
}

const similaritySearchByCosineDistance = `-- name: SimilaritySearchByCosineDistance :many
SELECT id, metadata, user_id, text, created_at, updated_at, 1 - (embeddings <=> $2) AS score 
FROM text_embeddings 
WHERE user_id = $1 AND embeddings <=> $2
ORDER BY 1 - (embedding <=> $2) LIMIT $3
`

type SimilaritySearchByCosineDistanceParams struct {
	UserID     string
	Embeddings pgvector.Vector
	Limit      int32
}

type SimilaritySearchByCosineDistanceRow struct {
	ID        int64
	Metadata  types.JSONB
	UserID    string
	Text      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Score     int32
}

func (q *Queries) SimilaritySearchByCosineDistance(ctx context.Context, db DBTX, arg SimilaritySearchByCosineDistanceParams) ([]SimilaritySearchByCosineDistanceRow, error) {
	rows, err := db.Query(ctx, similaritySearchByCosineDistance, arg.UserID, arg.Embeddings, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SimilaritySearchByCosineDistanceRow
	for rows.Next() {
		var i SimilaritySearchByCosineDistanceRow
		if err := rows.Scan(
			&i.ID,
			&i.Metadata,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const similaritySearchByCosineDistanceWithFilter = `-- name: SimilaritySearchByCosineDistanceWithFilter :many
SELECT id, metadata, user_id, text, created_at, updated_at, 1 - (embeddings <=> $2) AS score 
FROM text_embeddings 
WHERE user_id = $1 AND embeddings <=> $2
    AND metadata @> $3::jsonb
ORDER BY 1 - (embedding <=> $2) LIMIT $4
`

type SimilaritySearchByCosineDistanceWithFilterParams struct {
	UserID     string
	Embeddings pgvector.Vector
	Column3    []byte
	Limit      int32
}

type SimilaritySearchByCosineDistanceWithFilterRow struct {
	ID        int64
	Metadata  types.JSONB
	UserID    string
	Text      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Score     int32
}

func (q *Queries) SimilaritySearchByCosineDistanceWithFilter(ctx context.Context, db DBTX, arg SimilaritySearchByCosineDistanceWithFilterParams) ([]SimilaritySearchByCosineDistanceWithFilterRow, error) {
	rows, err := db.Query(ctx, similaritySearchByCosineDistanceWithFilter,
		arg.UserID,
		arg.Embeddings,
		arg.Column3,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SimilaritySearchByCosineDistanceWithFilterRow
	for rows.Next() {
		var i SimilaritySearchByCosineDistanceWithFilterRow
		if err := rows.Scan(
			&i.ID,
			&i.Metadata,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const similaritySearchByL2Distance = `-- name: SimilaritySearchByL2Distance :many
SELECT id, metadata, user_id, text, created_at, updated_at, embeddings <-> $2 AS score 
FROM text_embeddings
WHERE user_id = $1 AND embeddings <-> $2
ORDER BY embeddings <-> $2  LIMIT $3
`

type SimilaritySearchByL2DistanceParams struct {
	UserID     string
	Embeddings pgvector.Vector
	Limit      int32
}

type SimilaritySearchByL2DistanceRow struct {
	ID        int64
	Metadata  types.JSONB
	UserID    string
	Text      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Score     interface{}
}

func (q *Queries) SimilaritySearchByL2Distance(ctx context.Context, db DBTX, arg SimilaritySearchByL2DistanceParams) ([]SimilaritySearchByL2DistanceRow, error) {
	rows, err := db.Query(ctx, similaritySearchByL2Distance, arg.UserID, arg.Embeddings, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SimilaritySearchByL2DistanceRow
	for rows.Next() {
		var i SimilaritySearchByL2DistanceRow
		if err := rows.Scan(
			&i.ID,
			&i.Metadata,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const similaritySearchByL2DistanceWithFilter = `-- name: SimilaritySearchByL2DistanceWithFilter :many
SELECT id, metadata, user_id, text, created_at, updated_at, embeddings <-> $2 AS score 
FROM text_embeddings
WHERE user_id = $1 AND embeddings <-> $2
    AND metadata @> $3::jsonb
ORDER BY embeddings <-> $2  LIMIT $4
`

type SimilaritySearchByL2DistanceWithFilterParams struct {
	UserID     string
	Embeddings pgvector.Vector
	Column3    []byte
	Limit      int32
}

type SimilaritySearchByL2DistanceWithFilterRow struct {
	ID        int64
	Metadata  types.JSONB
	UserID    string
	Text      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Score     interface{}
}

func (q *Queries) SimilaritySearchByL2DistanceWithFilter(ctx context.Context, db DBTX, arg SimilaritySearchByL2DistanceWithFilterParams) ([]SimilaritySearchByL2DistanceWithFilterRow, error) {
	rows, err := db.Query(ctx, similaritySearchByL2DistanceWithFilter,
		arg.UserID,
		arg.Embeddings,
		arg.Column3,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SimilaritySearchByL2DistanceWithFilterRow
	for rows.Next() {
		var i SimilaritySearchByL2DistanceWithFilterRow
		if err := rows.Scan(
			&i.ID,
			&i.Metadata,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
