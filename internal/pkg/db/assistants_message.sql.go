// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: assistants_message.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	pgv "github.com/pgvector/pgvector-go"
)

const createThreadMessage = `-- name: CreateThreadMessage :one
INSERT INTO assistant_messages (user_id, assistant_id, thread_id, model, role, text, prompt_token, completion_token, embeddings, metadata)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, uuid, user_id, assistant_id, thread_id, model, role, text, prompt_token, completion_token, embeddings, metadata, created_at, updated_at
`

type CreateThreadMessageParams struct {
	UserID          pgtype.UUID
	AssistantID     pgtype.UUID
	ThreadID        pgtype.UUID
	Model           pgtype.Text
	Role            string
	Text            pgtype.Text
	PromptToken     pgtype.Int4
	CompletionToken pgtype.Int4
	Embeddings      *pgv.Vector
	Metadata        []byte
}

// CRUD for assistant_thread_messages
func (q *Queries) CreateThreadMessage(ctx context.Context, db DBTX, arg CreateThreadMessageParams) (AssistantMessage, error) {
	row := db.QueryRow(ctx, createThreadMessage,
		arg.UserID,
		arg.AssistantID,
		arg.ThreadID,
		arg.Model,
		arg.Role,
		arg.Text,
		arg.PromptToken,
		arg.CompletionToken,
		arg.Embeddings,
		arg.Metadata,
	)
	var i AssistantMessage
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.AssistantID,
		&i.ThreadID,
		&i.Model,
		&i.Role,
		&i.Text,
		&i.PromptToken,
		&i.CompletionToken,
		&i.Embeddings,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteThreadMessage = `-- name: DeleteThreadMessage :exec
DELETE FROM assistant_messages WHERE uuid = $1
`

func (q *Queries) DeleteThreadMessage(ctx context.Context, db DBTX, argUuid uuid.UUID) error {
	_, err := db.Exec(ctx, deleteThreadMessage, argUuid)
	return err
}

const deleteThreadMessageByThreadAndCreatedAt = `-- name: DeleteThreadMessageByThreadAndCreatedAt :exec
DELETE FROM assistant_messages WHERE thread_id = $1 AND created_at >= $2
`

type DeleteThreadMessageByThreadAndCreatedAtParams struct {
	ThreadID  pgtype.UUID
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) DeleteThreadMessageByThreadAndCreatedAt(ctx context.Context, db DBTX, arg DeleteThreadMessageByThreadAndCreatedAtParams) error {
	_, err := db.Exec(ctx, deleteThreadMessageByThreadAndCreatedAt, arg.ThreadID, arg.CreatedAt)
	return err
}

const deleteThreadMessagesByAssistant = `-- name: DeleteThreadMessagesByAssistant :exec
DELETE FROM assistant_messages
USING assistant_threads
WHERE assistant_messages.thread_id = assistant_threads.uuid
  AND assistant_threads.assistant_id = $1
`

func (q *Queries) DeleteThreadMessagesByAssistant(ctx context.Context, db DBTX, assistantID pgtype.UUID) error {
	_, err := db.Exec(ctx, deleteThreadMessagesByAssistant, assistantID)
	return err
}

const deleteThreadMessagesByThread = `-- name: DeleteThreadMessagesByThread :exec
DELETE FROM assistant_messages WHERE thread_id = $1
`

func (q *Queries) DeleteThreadMessagesByThread(ctx context.Context, db DBTX, threadID pgtype.UUID) error {
	_, err := db.Exec(ctx, deleteThreadMessagesByThread, threadID)
	return err
}

const getThreadMessage = `-- name: GetThreadMessage :one
SELECT id, uuid, user_id, assistant_id, thread_id, model, role, text, prompt_token, completion_token, embeddings, metadata, created_at, updated_at FROM assistant_messages WHERE uuid = $1
`

func (q *Queries) GetThreadMessage(ctx context.Context, db DBTX, argUuid uuid.UUID) (AssistantMessage, error) {
	row := db.QueryRow(ctx, getThreadMessage, argUuid)
	var i AssistantMessage
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.AssistantID,
		&i.ThreadID,
		&i.Model,
		&i.Role,
		&i.Text,
		&i.PromptToken,
		&i.CompletionToken,
		&i.Embeddings,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listThreadMessages = `-- name: ListThreadMessages :many
SELECT id, uuid, user_id, assistant_id, thread_id, model, role, text, prompt_token, completion_token, embeddings, metadata, created_at, updated_at FROM assistant_messages WHERE thread_id = $1 ORDER BY created_at ASC
`

func (q *Queries) ListThreadMessages(ctx context.Context, db DBTX, threadID pgtype.UUID) ([]AssistantMessage, error) {
	rows, err := db.Query(ctx, listThreadMessages, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssistantMessage
	for rows.Next() {
		var i AssistantMessage
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.AssistantID,
			&i.ThreadID,
			&i.Model,
			&i.Role,
			&i.Text,
			&i.PromptToken,
			&i.CompletionToken,
			&i.Embeddings,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThreadMessagesWithLimit = `-- name: ListThreadMessagesWithLimit :many
SELECT id, uuid, user_id, assistant_id, thread_id, model, role, text, prompt_token, completion_token, embeddings, metadata, created_at, updated_at FROM assistant_messages WHERE thread_id = $1 ORDER BY created_at DESC LIMIT $2
`

type ListThreadMessagesWithLimitParams struct {
	ThreadID pgtype.UUID
	Limit    int32
}

func (q *Queries) ListThreadMessagesWithLimit(ctx context.Context, db DBTX, arg ListThreadMessagesWithLimitParams) ([]AssistantMessage, error) {
	rows, err := db.Query(ctx, listThreadMessagesWithLimit, arg.ThreadID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssistantMessage
	for rows.Next() {
		var i AssistantMessage
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.AssistantID,
			&i.ThreadID,
			&i.Model,
			&i.Role,
			&i.Text,
			&i.PromptToken,
			&i.CompletionToken,
			&i.Embeddings,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const similaritySearchMessages = `-- name: SimilaritySearchMessages :many
SELECT id, uuid, user_id, assistant_id, thread_id, model, role, text, prompt_token, completion_token, embeddings, metadata, created_at, updated_at
FROM assistant_messages
WHERE thread_id = $1 AND (embeddings <=> $2 < 0.5)
ORDER BY 1 - (embeddings <=> $2) DESC
LIMIT $3
`

type SimilaritySearchMessagesParams struct {
	ThreadID   pgtype.UUID
	Embeddings *pgv.Vector
	Limit      int32
}

func (q *Queries) SimilaritySearchMessages(ctx context.Context, db DBTX, arg SimilaritySearchMessagesParams) ([]AssistantMessage, error) {
	rows, err := db.Query(ctx, similaritySearchMessages, arg.ThreadID, arg.Embeddings, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssistantMessage
	for rows.Next() {
		var i AssistantMessage
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.AssistantID,
			&i.ThreadID,
			&i.Model,
			&i.Role,
			&i.Text,
			&i.PromptToken,
			&i.CompletionToken,
			&i.Embeddings,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateThreadMessage = `-- name: UpdateThreadMessage :exec
UPDATE assistant_messages SET role = $2, text = $3, model = $4, prompt_token=$5, completion_token=$6,embeddings=$7, metadata=$8 WHERE uuid = $1
`

type UpdateThreadMessageParams struct {
	Uuid            uuid.UUID
	Role            string
	Text            pgtype.Text
	Model           pgtype.Text
	PromptToken     pgtype.Int4
	CompletionToken pgtype.Int4
	Embeddings      *pgv.Vector
	Metadata        []byte
}

func (q *Queries) UpdateThreadMessage(ctx context.Context, db DBTX, arg UpdateThreadMessageParams) error {
	_, err := db.Exec(ctx, updateThreadMessage,
		arg.Uuid,
		arg.Role,
		arg.Text,
		arg.Model,
		arg.PromptToken,
		arg.CompletionToken,
		arg.Embeddings,
		arg.Metadata,
	)
	return err
}
