// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Errors  []Error `json:"errors"`
	Success bool    `json:"success"`
}

// PansearchResponseData defines model for PansearchResponseData.
type PansearchResponseData = []PansearchResponseItemData

// PansearchResponseItemData defines model for PansearchResponseItemData.
type PansearchResponseItemData struct {
	// Content Detailed description of the content, including metadata and links.
	Content string  `json:"content"`
	Id      float32 `json:"id"`
	Image   string  `json:"image"`
	Pan     string  `json:"pan"`
	Time    string  `json:"time"`
}

// WebReaderResponseData defines model for WebReaderResponseData.
type WebReaderResponseData struct {
	Content     string  `json:"content"`
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
	Url         string  `json:"url"`
}

// WebSearcherResponseData defines model for WebSearcherResponseData.
type WebSearcherResponseData = []WebReaderResponseData

// WebSummaryResponseData defines model for WebSummaryResponseData.
type WebSummaryResponseData struct {
	Data string `json:"data"`
}

// CommonErrorResponse defines model for CommonErrorResponse.
type CommonErrorResponse = ErrorResponse

// GetApiToolsAlipanSearchParams defines parameters for GetApiToolsAlipanSearch.
type GetApiToolsAlipanSearchParams struct {
	// Query The search term used to find relevant content.
	Query string `form:"query" json:"query"`
}

// GetApiToolsWebReaderParams defines parameters for GetApiToolsWebReader.
type GetApiToolsWebReaderParams struct {
	Url string `form:"url" json:"url"`
}

// GetApiToolsWebSearchParams defines parameters for GetApiToolsWebSearch.
type GetApiToolsWebSearchParams struct {
	Query string `form:"query" json:"query"`
}

// GetApiToolsWebSummaryParams defines parameters for GetApiToolsWebSummary.
type GetApiToolsWebSummaryParams struct {
	Url         string  `form:"url" json:"url"`
	Stream      *string `form:"stream,omitempty" json:"stream,omitempty"`
	PageContent *string `form:"page_content,omitempty" json:"page_content,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/tools/alipan-search)
	GetApiToolsAlipanSearch(w http.ResponseWriter, r *http.Request, params GetApiToolsAlipanSearchParams)

	// (GET /api/tools/web-reader)
	GetApiToolsWebReader(w http.ResponseWriter, r *http.Request, params GetApiToolsWebReaderParams)

	// (GET /api/tools/web-search)
	GetApiToolsWebSearch(w http.ResponseWriter, r *http.Request, params GetApiToolsWebSearchParams)

	// (GET /api/tools/web-summary)
	GetApiToolsWebSummary(w http.ResponseWriter, r *http.Request, params GetApiToolsWebSummaryParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /api/tools/alipan-search)
func (_ Unimplemented) GetApiToolsAlipanSearch(w http.ResponseWriter, r *http.Request, params GetApiToolsAlipanSearchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/tools/web-reader)
func (_ Unimplemented) GetApiToolsWebReader(w http.ResponseWriter, r *http.Request, params GetApiToolsWebReaderParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/tools/web-search)
func (_ Unimplemented) GetApiToolsWebSearch(w http.ResponseWriter, r *http.Request, params GetApiToolsWebSearchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/tools/web-summary)
func (_ Unimplemented) GetApiToolsWebSummary(w http.ResponseWriter, r *http.Request, params GetApiToolsWebSummaryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiToolsAlipanSearch operation middleware
func (siw *ServerInterfaceWrapper) GetApiToolsAlipanSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiToolsAlipanSearchParams

	// ------------- Required query parameter "query" -------------

	if paramValue := r.URL.Query().Get("query"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "query"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiToolsAlipanSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiToolsWebReader operation middleware
func (siw *ServerInterfaceWrapper) GetApiToolsWebReader(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiToolsWebReaderParams

	// ------------- Required query parameter "url" -------------

	if paramValue := r.URL.Query().Get("url"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "url"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "url", r.URL.Query(), &params.Url)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "url", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiToolsWebReader(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiToolsWebSearch operation middleware
func (siw *ServerInterfaceWrapper) GetApiToolsWebSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiToolsWebSearchParams

	// ------------- Required query parameter "query" -------------

	if paramValue := r.URL.Query().Get("query"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "query"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiToolsWebSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiToolsWebSummary operation middleware
func (siw *ServerInterfaceWrapper) GetApiToolsWebSummary(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiToolsWebSummaryParams

	// ------------- Required query parameter "url" -------------

	if paramValue := r.URL.Query().Get("url"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "url"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "url", r.URL.Query(), &params.Url)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "url", Err: err})
		return
	}

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	// ------------- Optional query parameter "page_content" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_content", r.URL.Query(), &params.PageContent)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_content", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiToolsWebSummary(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tools/alipan-search", wrapper.GetApiToolsAlipanSearch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tools/web-reader", wrapper.GetApiToolsWebReader)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tools/web-search", wrapper.GetApiToolsWebSearch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tools/web-summary", wrapper.GetApiToolsWebSummary)
	})

	return r
}

type CommonErrorResponseJSONResponse ErrorResponse

type GetApiToolsAlipanSearchRequestObject struct {
	Params GetApiToolsAlipanSearchParams
}

type GetApiToolsAlipanSearchResponseObject interface {
	VisitGetApiToolsAlipanSearchResponse(w http.ResponseWriter) error
}

type GetApiToolsAlipanSearch200JSONResponse struct {
	Data    PansearchResponseData `json:"data"`
	Success bool                  `json:"success"`
}

func (response GetApiToolsAlipanSearch200JSONResponse) VisitGetApiToolsAlipanSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsAlipanSearch400JSONResponse struct {
	CommonErrorResponseJSONResponse
}

func (response GetApiToolsAlipanSearch400JSONResponse) VisitGetApiToolsAlipanSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsAlipanSearch401JSONResponse ErrorResponse

func (response GetApiToolsAlipanSearch401JSONResponse) VisitGetApiToolsAlipanSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsAlipanSearch403JSONResponse ErrorResponse

func (response GetApiToolsAlipanSearch403JSONResponse) VisitGetApiToolsAlipanSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsAlipanSearch500JSONResponse ErrorResponse

func (response GetApiToolsAlipanSearch500JSONResponse) VisitGetApiToolsAlipanSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebReaderRequestObject struct {
	Params GetApiToolsWebReaderParams
}

type GetApiToolsWebReaderResponseObject interface {
	VisitGetApiToolsWebReaderResponse(w http.ResponseWriter) error
}

type GetApiToolsWebReader200JSONResponse struct {
	Data    WebReaderResponseData `json:"data"`
	Success bool                  `json:"success"`
}

func (response GetApiToolsWebReader200JSONResponse) VisitGetApiToolsWebReaderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebReader400JSONResponse struct {
	CommonErrorResponseJSONResponse
}

func (response GetApiToolsWebReader400JSONResponse) VisitGetApiToolsWebReaderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebReader401JSONResponse ErrorResponse

func (response GetApiToolsWebReader401JSONResponse) VisitGetApiToolsWebReaderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebReader403JSONResponse ErrorResponse

func (response GetApiToolsWebReader403JSONResponse) VisitGetApiToolsWebReaderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebReader500JSONResponse ErrorResponse

func (response GetApiToolsWebReader500JSONResponse) VisitGetApiToolsWebReaderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSearchRequestObject struct {
	Params GetApiToolsWebSearchParams
}

type GetApiToolsWebSearchResponseObject interface {
	VisitGetApiToolsWebSearchResponse(w http.ResponseWriter) error
}

type GetApiToolsWebSearch200JSONResponse struct {
	Data    WebSearcherResponseData `json:"data"`
	Success bool                    `json:"success"`
}

func (response GetApiToolsWebSearch200JSONResponse) VisitGetApiToolsWebSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSearch400JSONResponse struct {
	CommonErrorResponseJSONResponse
}

func (response GetApiToolsWebSearch400JSONResponse) VisitGetApiToolsWebSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSearch401JSONResponse ErrorResponse

func (response GetApiToolsWebSearch401JSONResponse) VisitGetApiToolsWebSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSearch403JSONResponse ErrorResponse

func (response GetApiToolsWebSearch403JSONResponse) VisitGetApiToolsWebSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSearch500JSONResponse ErrorResponse

func (response GetApiToolsWebSearch500JSONResponse) VisitGetApiToolsWebSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSummaryRequestObject struct {
	Params GetApiToolsWebSummaryParams
}

type GetApiToolsWebSummaryResponseObject interface {
	VisitGetApiToolsWebSummaryResponse(w http.ResponseWriter) error
}

type GetApiToolsWebSummary200JSONResponse struct {
	Data    WebSummaryResponseData `json:"data"`
	Success bool                   `json:"success"`
}

func (response GetApiToolsWebSummary200JSONResponse) VisitGetApiToolsWebSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSummary200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetApiToolsWebSummary200TexteventStreamResponse) VisitGetApiToolsWebSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetApiToolsWebSummary400JSONResponse struct {
	CommonErrorResponseJSONResponse
}

func (response GetApiToolsWebSummary400JSONResponse) VisitGetApiToolsWebSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSummary401JSONResponse ErrorResponse

func (response GetApiToolsWebSummary401JSONResponse) VisitGetApiToolsWebSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSummary403JSONResponse ErrorResponse

func (response GetApiToolsWebSummary403JSONResponse) VisitGetApiToolsWebSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetApiToolsWebSummary500JSONResponse ErrorResponse

func (response GetApiToolsWebSummary500JSONResponse) VisitGetApiToolsWebSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/tools/alipan-search)
	GetApiToolsAlipanSearch(ctx context.Context, request GetApiToolsAlipanSearchRequestObject) (GetApiToolsAlipanSearchResponseObject, error)

	// (GET /api/tools/web-reader)
	GetApiToolsWebReader(ctx context.Context, request GetApiToolsWebReaderRequestObject) (GetApiToolsWebReaderResponseObject, error)

	// (GET /api/tools/web-search)
	GetApiToolsWebSearch(ctx context.Context, request GetApiToolsWebSearchRequestObject) (GetApiToolsWebSearchResponseObject, error)

	// (GET /api/tools/web-summary)
	GetApiToolsWebSummary(ctx context.Context, request GetApiToolsWebSummaryRequestObject) (GetApiToolsWebSummaryResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetApiToolsAlipanSearch operation middleware
func (sh *strictHandler) GetApiToolsAlipanSearch(w http.ResponseWriter, r *http.Request, params GetApiToolsAlipanSearchParams) {
	var request GetApiToolsAlipanSearchRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiToolsAlipanSearch(ctx, request.(GetApiToolsAlipanSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiToolsAlipanSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiToolsAlipanSearchResponseObject); ok {
		if err := validResponse.VisitGetApiToolsAlipanSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiToolsWebReader operation middleware
func (sh *strictHandler) GetApiToolsWebReader(w http.ResponseWriter, r *http.Request, params GetApiToolsWebReaderParams) {
	var request GetApiToolsWebReaderRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiToolsWebReader(ctx, request.(GetApiToolsWebReaderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiToolsWebReader")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiToolsWebReaderResponseObject); ok {
		if err := validResponse.VisitGetApiToolsWebReaderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiToolsWebSearch operation middleware
func (sh *strictHandler) GetApiToolsWebSearch(w http.ResponseWriter, r *http.Request, params GetApiToolsWebSearchParams) {
	var request GetApiToolsWebSearchRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiToolsWebSearch(ctx, request.(GetApiToolsWebSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiToolsWebSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiToolsWebSearchResponseObject); ok {
		if err := validResponse.VisitGetApiToolsWebSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiToolsWebSummary operation middleware
func (sh *strictHandler) GetApiToolsWebSummary(w http.ResponseWriter, r *http.Request, params GetApiToolsWebSummaryParams) {
	var request GetApiToolsWebSummaryRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiToolsWebSummary(ctx, request.(GetApiToolsWebSummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiToolsWebSummary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiToolsWebSummaryResponseObject); ok {
		if err := validResponse.VisitGetApiToolsWebSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY/28TRxb/V0bDSW11TryO+RIsIR3f1KKjJxSC0B2J0GR3bA9Z7y4zs0l9VaTAhYJx",
	"cKAQCCbAHYdJoKI4BzTBMYnUfwXvrv1T7k84zay/JmsS2utdq/a39cx789689z6f98ZfQtVMWaaBDc5g",
	"7EtIMbNMg2H547CZSpnGUUpNOlBfF8uqaXBscPGJLEsnKuLENMLnmGmINaYmcQqJr99RHIcxuCvcshH2",
	"d1m489SJiYkQ1DBTKbHEYTAGhQCgLYFQ/WDpmdQWHxY1LUw58R1WTU16iL9AKUvHMLZbUUKQpy0MY5AY",
	"HCcwhRMhmMKMoUSnKDyENDCAz9uYcdhUYpwSIyHNU3zeJhRrMHbGN9Q6Z7gpb46cwyoXNraErdNVLLbl",
	"F+E4xXYULnFs3Q6iFKXFb2arKmZSX8NxZOscxuJIZ7gpOmKaOkbGljs0NEMNX4JucQIZDCOqJhs3OYI4",
	"2rHXW7SPcZySJwTcpLtwe5rOtNUfZHIRNBZCkGgwFglBkpLZhUnOLRYLh+vavaqZCsu93nNWAoaghUSl",
	"IZ2kbUOjZEzklJOUUO1T+qI9EaVHiQxG+mKKElOUv8CJ4dCWimtiobN8j2COiI410LYMzDjgyaa/IUAM",
	"Vbc1YiRACnOkIY4AMjSgE2OU9YrENIvTuX7NWyhulPO11Rtu/o6XeVp9tQjAZ4SBIVtRoiqzkAFUHTF2",
	"4KMkSSR1kkjynlGcHjep9pGUwUcQHfWlw0LcXwSfI44pQToDH/cpkf2fgCEj0hN1nv/TubQIdv8R9EX2",
	"KieGjCHDnZmprgsf3NlLlVLWmbnh3XrozC9WVq4516crpZyXKzrfPvDyU075YmXltjc7XVl5/m7yojO/",
	"WF2/W1l51lzcKE+7mUl3PuPlpyqlkre06ty/7GYL7nym+ugbb6FYWSk5315xrz72/rXmXXgtzry66GWe",
	"CkPlVxvlaXFg6Z6/6M698A/xLryuPb8ohC8tV5f+UXl708sVhQOFl5WV1erC19XckpvNfL9cfXXfzWac",
	"Qq5SyrtXrtdm1yulXDW75Nx762Xuua8KXn7KKz1x7zxxnj+p3X3kX8IpvHEy15y1yUr5iTv7xHmx6mbW",
	"nMdL1ZVnXn7Knc86M1nv7R33ftHLT1XXL3uLWf+uvlkRsFyxsjLpvVx1rtxxpta9bwq+eqWUrax+V1nJ",
	"eYUH3sKcn16nOOc8/Js7n3Ezk86ll9ULt95NXqzlZ7z7k/UMLM065cmN8rRTeFNdn6ufX/rK/S7jzFx1",
	"rhRrc+vu7RfejQdO8ZaTzXpXXjtfT3u5e9VcpprLfb/slG46xVte5o0I2bWl2t2n3sKc8+Krd5MXRcJr",
	"N9fcXGGjnPeLBtXra0h0CdOmKu4RlToEAUc0gfmBIXh2REdyJUlx/MBQE4Dj4+O9bTCTQGTh/s8OW5+O",
	"Hh04sm/fEPSrcecKfh0jX014+++HNy8A5/GCU5zZKOf/JBZmloH798ve87WNcn5XB3J2iWRnFsCuQ4cO",
	"C8lcBrj3C9XLzwTE7i3XbmXlgY9A7dGN2oWbG+X8Hw623Dl7MokoPns4iQwD60LyRgF4a4+91SkhifS0",
	"djYhlh/fBu7VWW9xvX7An23jBDIOmQEdxievNqaL9PdH+/uacoadGvG7V53d2ntXI2yqZvRaDR7tTeFw",
	"I1MsHN+7G2tRPBLdv09R43sUrb8/qkSje6J9yv7dGo7WKXGLV5Ij221tosvN8j5/titIKlX29kT6BiN7",
	"YpFoTNn7e6U/pijbtlmiwRBssbtwpXH9uqGgnnUajwxgpGG6uWd1pe6Wr4NJwgBh7TTdYG2rbnbzhTt4",
	"v9tZAV2g23mccH1TBI/6X+AESmAwKPcDFG2qB1dFW/vbNuS8fro4rBX7LmE+Ketsa6B3NBwEpylgMBCG",
	"7FQK0fT7E6ptnhVgXQ1w/MX2M51U33pRMWNh1aaEp08Kz31bhzCimDbHXTk/+kvNA0T0/cGWGHFTiNYz",
	"CwdNUwcHTxxjgBjgsG7aWlxHFIPTJh3FVExkY5gyf46I9Cq9ioiCaWEDWQTGYFQuCTjwpHQmjCwS5qap",
	"szDSiYWMHp8AxF4CBwwnft5A3KQgTnTM5NTRpAowTniSGKDJV+DjcTwCJOI/ATYT80p9sBBDikiBfAEc",
	"02AMfor5QYuIG7KD0hfflnSXohTm4oJiiuv0aDCJge804JimgM2wBrgJ4kR6puMxZPAGIoVVIrTO25im",
	"YQgaSGag8bOVVU5tHGp7kXQalfLCCmvGo3Pq0s1RIsZ8YhzHRoIn5XC5uYqGQ52vpj5F+aBXUnARf9BY",
	"3UBO0GPAD8E2bwFptaUfgIIt77O2jFHMbJ0z4cFu//JB3jeDFA56V0rdyI/Qjf5g3T0/2GcZljb0jeOR",
	"Hio5rSv0BjCnBI9hcPz45z1xSrCh6elmq4lTMwUQODVw/L3IalLnVlgF4cLn8p2i4tTAcYEJ2nC03bdO",
	"eAT3l7hJU4hLswT+HODStdH8L+EygLlNjS2DBQKCWuUo8OtDT6uzytJt9NQzwxPDAcDaWU8T8RUh9Tua",
	"iLlc4qYF4mQMN7hK9jixQ6hAm98B63lhIYCRmhTNWRXpD3ViVQwT26GzW9P7b3QtQbwBnasTmea42B2x",
	"ia75NcYIx52tbM/PBJuBQ+Rv6PylodMftbvC8xSTLc/vLEiTePN1yF9xW6C3RVbdzk/Q+ASwRPNre59J",
	"iDW8/PG9LxTsJuMUI6HezbPTScyTmEpvpKx0sPnneJtfnX/9bmdYXPFs6339vsAEPIa7B+eDX9H/J+YJ",
	"eFX+tMQTgqJ7hPEYNnhPPe2/xHt0JVBUr4j0b/T5PvqUu3SswV3yn5smpUhS7R1DKG34vCLg2xKJhcO6",
	"qSI9aTIe69/Xvw9ODE/8JwAA//+TpazEyBsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
