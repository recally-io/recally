/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AuthRegisterImport } from "./routes/auth/register";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();
const SettingsIndexLazyImport = createFileRoute("/settings/")();
const BookmarksIndexLazyImport = createFileRoute("/bookmarks/")();
const AuthIndexLazyImport = createFileRoute("/auth/")();
const SettingsSummaryLazyImport = createFileRoute("/settings/summary")();
const SettingsProfileLazyImport = createFileRoute("/settings/profile")();
const BookmarksIdLazyImport = createFileRoute("/bookmarks/$id")();
const AuthLoginLazyImport = createFileRoute("/auth/login")();
const AuthOauthProviderCallbackLazyImport = createFileRoute(
	"/auth/oauth/$provider/callback",
)();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const SettingsIndexLazyRoute = SettingsIndexLazyImport.update({
	id: "/settings/",
	path: "/settings/",
	getParentRoute: () => rootRoute,
} as any).lazy(() =>
	import("./routes/settings/index.lazy").then((d) => d.Route),
);

const BookmarksIndexLazyRoute = BookmarksIndexLazyImport.update({
	id: "/bookmarks/",
	path: "/bookmarks/",
	getParentRoute: () => rootRoute,
} as any).lazy(() =>
	import("./routes/bookmarks/index.lazy").then((d) => d.Route),
);

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
	id: "/auth/",
	path: "/auth/",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/auth/index.lazy").then((d) => d.Route));

const SettingsSummaryLazyRoute = SettingsSummaryLazyImport.update({
	id: "/settings/summary",
	path: "/settings/summary",
	getParentRoute: () => rootRoute,
} as any).lazy(() =>
	import("./routes/settings/summary.lazy").then((d) => d.Route),
);

const SettingsProfileLazyRoute = SettingsProfileLazyImport.update({
	id: "/settings/profile",
	path: "/settings/profile",
	getParentRoute: () => rootRoute,
} as any).lazy(() =>
	import("./routes/settings/profile.lazy").then((d) => d.Route),
);

const BookmarksIdLazyRoute = BookmarksIdLazyImport.update({
	id: "/bookmarks/$id",
	path: "/bookmarks/$id",
	getParentRoute: () => rootRoute,
} as any).lazy(() =>
	import("./routes/bookmarks/$id.lazy").then((d) => d.Route),
);

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
	id: "/auth/login",
	path: "/auth/login",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/auth/login.lazy").then((d) => d.Route));

const AuthRegisterRoute = AuthRegisterImport.update({
	id: "/auth/register",
	path: "/auth/register",
	getParentRoute: () => rootRoute,
} as any);

const AuthOauthProviderCallbackLazyRoute =
	AuthOauthProviderCallbackLazyImport.update({
		id: "/auth/oauth/$provider/callback",
		path: "/auth/oauth/$provider/callback",
		getParentRoute: () => rootRoute,
	} as any).lazy(() =>
		import("./routes/auth/oauth.$provider.callback.lazy").then((d) => d.Route),
	);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/auth/register": {
			id: "/auth/register";
			path: "/auth/register";
			fullPath: "/auth/register";
			preLoaderRoute: typeof AuthRegisterImport;
			parentRoute: typeof rootRoute;
		};
		"/auth/login": {
			id: "/auth/login";
			path: "/auth/login";
			fullPath: "/auth/login";
			preLoaderRoute: typeof AuthLoginLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/bookmarks/$id": {
			id: "/bookmarks/$id";
			path: "/bookmarks/$id";
			fullPath: "/bookmarks/$id";
			preLoaderRoute: typeof BookmarksIdLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/settings/profile": {
			id: "/settings/profile";
			path: "/settings/profile";
			fullPath: "/settings/profile";
			preLoaderRoute: typeof SettingsProfileLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/settings/summary": {
			id: "/settings/summary";
			path: "/settings/summary";
			fullPath: "/settings/summary";
			preLoaderRoute: typeof SettingsSummaryLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/auth/": {
			id: "/auth/";
			path: "/auth";
			fullPath: "/auth";
			preLoaderRoute: typeof AuthIndexLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/bookmarks/": {
			id: "/bookmarks/";
			path: "/bookmarks";
			fullPath: "/bookmarks";
			preLoaderRoute: typeof BookmarksIndexLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/settings/": {
			id: "/settings/";
			path: "/settings";
			fullPath: "/settings";
			preLoaderRoute: typeof SettingsIndexLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/auth/oauth/$provider/callback": {
			id: "/auth/oauth/$provider/callback";
			path: "/auth/oauth/$provider/callback";
			fullPath: "/auth/oauth/$provider/callback";
			preLoaderRoute: typeof AuthOauthProviderCallbackLazyImport;
			parentRoute: typeof rootRoute;
		};
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	"/": typeof IndexLazyRoute;
	"/auth/register": typeof AuthRegisterRoute;
	"/auth/login": typeof AuthLoginLazyRoute;
	"/bookmarks/$id": typeof BookmarksIdLazyRoute;
	"/settings/profile": typeof SettingsProfileLazyRoute;
	"/settings/summary": typeof SettingsSummaryLazyRoute;
	"/auth": typeof AuthIndexLazyRoute;
	"/bookmarks": typeof BookmarksIndexLazyRoute;
	"/settings": typeof SettingsIndexLazyRoute;
	"/auth/oauth/$provider/callback": typeof AuthOauthProviderCallbackLazyRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexLazyRoute;
	"/auth/register": typeof AuthRegisterRoute;
	"/auth/login": typeof AuthLoginLazyRoute;
	"/bookmarks/$id": typeof BookmarksIdLazyRoute;
	"/settings/profile": typeof SettingsProfileLazyRoute;
	"/settings/summary": typeof SettingsSummaryLazyRoute;
	"/auth": typeof AuthIndexLazyRoute;
	"/bookmarks": typeof BookmarksIndexLazyRoute;
	"/settings": typeof SettingsIndexLazyRoute;
	"/auth/oauth/$provider/callback": typeof AuthOauthProviderCallbackLazyRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexLazyRoute;
	"/auth/register": typeof AuthRegisterRoute;
	"/auth/login": typeof AuthLoginLazyRoute;
	"/bookmarks/$id": typeof BookmarksIdLazyRoute;
	"/settings/profile": typeof SettingsProfileLazyRoute;
	"/settings/summary": typeof SettingsSummaryLazyRoute;
	"/auth/": typeof AuthIndexLazyRoute;
	"/bookmarks/": typeof BookmarksIndexLazyRoute;
	"/settings/": typeof SettingsIndexLazyRoute;
	"/auth/oauth/$provider/callback": typeof AuthOauthProviderCallbackLazyRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| "/"
		| "/auth/register"
		| "/auth/login"
		| "/bookmarks/$id"
		| "/settings/profile"
		| "/settings/summary"
		| "/auth"
		| "/bookmarks"
		| "/settings"
		| "/auth/oauth/$provider/callback";
	fileRoutesByTo: FileRoutesByTo;
	to:
		| "/"
		| "/auth/register"
		| "/auth/login"
		| "/bookmarks/$id"
		| "/settings/profile"
		| "/settings/summary"
		| "/auth"
		| "/bookmarks"
		| "/settings"
		| "/auth/oauth/$provider/callback";
	id:
		| "__root__"
		| "/"
		| "/auth/register"
		| "/auth/login"
		| "/bookmarks/$id"
		| "/settings/profile"
		| "/settings/summary"
		| "/auth/"
		| "/bookmarks/"
		| "/settings/"
		| "/auth/oauth/$provider/callback";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexLazyRoute: typeof IndexLazyRoute;
	AuthRegisterRoute: typeof AuthRegisterRoute;
	AuthLoginLazyRoute: typeof AuthLoginLazyRoute;
	BookmarksIdLazyRoute: typeof BookmarksIdLazyRoute;
	SettingsProfileLazyRoute: typeof SettingsProfileLazyRoute;
	SettingsSummaryLazyRoute: typeof SettingsSummaryLazyRoute;
	AuthIndexLazyRoute: typeof AuthIndexLazyRoute;
	BookmarksIndexLazyRoute: typeof BookmarksIndexLazyRoute;
	SettingsIndexLazyRoute: typeof SettingsIndexLazyRoute;
	AuthOauthProviderCallbackLazyRoute: typeof AuthOauthProviderCallbackLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexLazyRoute: IndexLazyRoute,
	AuthRegisterRoute: AuthRegisterRoute,
	AuthLoginLazyRoute: AuthLoginLazyRoute,
	BookmarksIdLazyRoute: BookmarksIdLazyRoute,
	SettingsProfileLazyRoute: SettingsProfileLazyRoute,
	SettingsSummaryLazyRoute: SettingsSummaryLazyRoute,
	AuthIndexLazyRoute: AuthIndexLazyRoute,
	BookmarksIndexLazyRoute: BookmarksIndexLazyRoute,
	SettingsIndexLazyRoute: SettingsIndexLazyRoute,
	AuthOauthProviderCallbackLazyRoute: AuthOauthProviderCallbackLazyRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/register",
        "/auth/login",
        "/bookmarks/$id",
        "/settings/profile",
        "/settings/summary",
        "/auth/",
        "/bookmarks/",
        "/settings/",
        "/auth/oauth/$provider/callback"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    },
    "/bookmarks/$id": {
      "filePath": "bookmarks/$id.lazy.tsx"
    },
    "/settings/profile": {
      "filePath": "settings/profile.lazy.tsx"
    },
    "/settings/summary": {
      "filePath": "settings/summary.lazy.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.lazy.tsx"
    },
    "/bookmarks/": {
      "filePath": "bookmarks/index.lazy.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.lazy.tsx"
    },
    "/auth/oauth/$provider/callback": {
      "filePath": "auth/oauth.$provider.callback.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
