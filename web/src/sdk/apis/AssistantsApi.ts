/* tslint:disable */
/* eslint-disable */
/**
 * Vibrain API
 * This is a simple API for Vibrain project.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: vibrain@vaayne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AssistantsAssistantIdThreadsGet200Response,
  AssistantsAssistantIdThreadsThreadIdMessagesGet200Response,
  AssistantsGet200Response,
  AssistantsGet400Response,
} from "../models/index";
import {
  AssistantsAssistantIdThreadsGet200ResponseFromJSON,
  AssistantsAssistantIdThreadsGet200ResponseToJSON,
  AssistantsAssistantIdThreadsThreadIdMessagesGet200ResponseFromJSON,
  AssistantsAssistantIdThreadsThreadIdMessagesGet200ResponseToJSON,
  AssistantsGet200ResponseFromJSON,
  AssistantsGet200ResponseToJSON,
  AssistantsGet400ResponseFromJSON,
  AssistantsGet400ResponseToJSON,
} from "../models/index";

/**
 *
 */
export class AssistantsApi extends runtime.BaseAPI {
  /**
   * Lists the threads for an assistant
   * List Threads
   */
  async assistantsAssistantIdThreadsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AssistantsAssistantIdThreadsGet200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/assistants/{assistant-id}/threads`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AssistantsAssistantIdThreadsGet200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Lists the threads for an assistant
   * List Threads
   */
  async assistantsAssistantIdThreadsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AssistantsAssistantIdThreadsGet200Response> {
    const response =
      await this.assistantsAssistantIdThreadsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Lists the messages for a thread
   * List Thread Messages
   */
  async assistantsAssistantIdThreadsThreadIdMessagesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<AssistantsAssistantIdThreadsThreadIdMessagesGet200Response>
  > {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/assistants/{assistant-id}/threads/{thread-id}/messages`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AssistantsAssistantIdThreadsThreadIdMessagesGet200ResponseFromJSON(
        jsonValue,
      ),
    );
  }

  /**
   * Lists the messages for a thread
   * List Thread Messages
   */
  async assistantsAssistantIdThreadsThreadIdMessagesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AssistantsAssistantIdThreadsThreadIdMessagesGet200Response> {
    const response =
      await this.assistantsAssistantIdThreadsThreadIdMessagesGetRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Lists the assistants for a user
   * List Assistants
   */
  async assistantsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AssistantsGet200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/assistants`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AssistantsGet200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Lists the assistants for a user
   * List Assistants
   */
  async assistantsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AssistantsGet200Response> {
    const response = await this.assistantsGetRaw(initOverrides);
    return await response.value();
  }
}
